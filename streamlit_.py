import streamlit as st
import numpy as np
import pickle
import pandas as pd
import plotly.express as px

# C·∫•u h√¨nh trang
st.set_page_config(page_title="Ph√¢n Kh√∫c Kh√°ch H√†ng", layout="centered")
df_total = pd.read_csv("dataframe_total.csv")
product_df = pd.read_csv("df_product_sales.csv")
category_df = pd.read_csv("df_category_sales.csv")

# Menu b√™n tr√°i
menu = st.sidebar.selectbox(
    "Menu",
    ["Trang Ch·ªß", "Kh√°m Ph√° D·ªØ Li·ªáu", "Ph√¢n Kh√∫c"]
)

# Trang Ch·ªß
if menu == "Trang Ch·ªß":
    st.title("D·ª± √Ån Ph√¢n Kh√∫c Kh√°ch H√†ng")
    st.write("Ch√†o m·ª´ng ƒë·∫øn v·ªõi B·∫£ng ƒêi·ªÅu Khi·ªÉn Ph√¢n Kh√∫c Kh√°ch H√†ng!")
    st.image("Fruit.jpg")
    st.header("Hi·ªÉu Bi·∫øt V·ªÅ B√†i To√°n Kinh Doanh:")
    st.write("C·ª≠a h√†ng X ch·ªß y·∫øu b√°n c√°c m·∫∑t h√†ng thi·∫øt y·∫øu nh∆∞ rau c·ªß, tr√°i c√¢y, th·ªãt, c√°, tr·ª©ng, s·ªØa, n∆∞·ªõc gi·∫£i kh√°t,... cho kh√°ch h√†ng b√°n l·∫ª.")
    st.write("D·ª± √°n Ph√¢n Kh√∫c Kh√°ch H√†ng s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ph√¢n t√≠ch RFM (Recency, Frequency, Monetary) ƒë·ªÉ chia kh√°ch h√†ng th√†nh c√°c nh√≥m kh√°c nhau ph·ª•c v·ª• cho c√°c chi·∫øn l∆∞·ª£c marketing.")
    st.write("  - Recency: S·ªë ng√†y k·ªÉ t·ª´ l·∫ßn mua g·∫ßn nh·∫•t")
    st.write("  - Frequency: S·ªë l·∫ßn mua h√†ng")
    st.write("  - Monetary: T·ªïng gi√° tr·ªã mua h√†ng")
    st.write("Vi·ªác k·∫øt h·ª£p ph∆∞∆°ng ph√°p RFM v·ªõi thu·∫≠t to√°n KMeans gi√∫p h·ªá th·ªëng ph√¢n nh√≥m kh√°ch h√†ng ho·∫°t ƒë·ªông hi·ªáu qu·∫£ h∆°n trong vi·ªác c√° nh√¢n h√≥a chƒÉm s√≥c v√† gi·ªØ ch√¢n kh√°ch h√†ng, ƒë·ªìng th·ªùi gi√∫p doanh nghi·ªáp gia tƒÉng doanh thu.")

# Trang Kh√°m Ph√° D·ªØ Li·ªáu
elif menu == "Kh√°m Ph√° D·ªØ Li·ªáu":
    st.title("Kh√°m Ph√° D·ªØ Li·ªáu")
    
    st.subheader("T√¨m Hi·ªÉu D·ªØ Li·ªáu")
    
    num_rows = st.number_input(
        "Nh·∫≠p s·ªë d√≤ng c·∫ßn xem", 
        min_value=2, 
        max_value=100, 
        value=5,  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
        step=1
    )
    
    st.dataframe(df_total.head(num_rows))
    st.write("D·ªØ li·ªáu ƒë∆∞·ª£c ghi nh·∫≠n t·ª´ ng√†y 1/1/2024 ƒë·∫øn 30/12/2015")
    st.subheader("""T·ªïng c·ªông c√≥:
                 
        ->11 danh m·ª•c s·∫£n ph·∫©m
                 
        ->167 s·∫£n ph·∫©m
                 
        ->3898 kh√°ch h√†ng
                 
        ->77380 s·∫£n ph·∫©m ƒë√£ b√°n""")
    st.subheader("""Trong ƒë√≥:

        ->S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t l√† Whole Milk
                 
        ->Danh m·ª•c b√°n ch·∫°y nh·∫•t l√† Fresh Food
                 
        ->T·ªïng doanh thu: 332159.63$
                 
        ->Th√°ng c√≥ doanh s·ªë cao nh·∫•t nƒÉm 2014 l√† th√°ng 5
                 
        ->Th√°ng c√≥ doanh s·ªë cao nh·∫•t nƒÉm 2015 l√† th√°ng 8""")
    st.subheader("üì¶ Top s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t")

    num_products = st.number_input(
        "Ch·ªçn s·ªë l∆∞·ª£ng s·∫£n ph·∫©m mu·ªën xem", 
        min_value=2, 
        max_value=len(product_df), 
        value=5
    )

    top_products = product_df.sort_values(by="counts", ascending=False).head(num_products)

    fig_product = px.bar(top_products, 
                        x="productName", 
                        y="counts",
                        color="counts",
                        title=f"Top {num_products} s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t",
                        labels={"product_name": "S·∫£n ph·∫©m", "counts": "S·ªë l∆∞·ª£ng b√°n"})

    st.plotly_chart(fig_product, use_container_width=True)

    st.subheader("üõçÔ∏è Top danh m·ª•c b√°n ch·∫°y")

    num_categories = st.number_input(
        "Ch·ªçn s·ªë l∆∞·ª£ng danh m·ª•c mu·ªën xem", 
        min_value=2, 
        max_value=len(category_df), 
        value=5
    )

    top_categories = category_df.sort_values(by="count_cat", ascending=False).head(num_categories)

    fig_category = px.bar(top_categories, 
                        x="Category", 
                        y="count_cat",
                        color="count_cat",
                        title=f"Top {num_categories} danh m·ª•c b√°n ch·∫°y nh·∫•t",
                        labels={"Category": "Danh m·ª•c", "count_cat": "S·ªë l∆∞·ª£ng b√°n"})

    st.plotly_chart(fig_category, use_container_width=True)

    st.write("K·∫øt qu·∫£ ph√¢n c·ª•m: ")
    st.image("output.png")
    st.image("newplot.png")

# Trang Ph√¢n Kh√∫c
elif menu == "Ph√¢n Kh√∫c":
    st.title("üîç Ph√¢n Kh√∫c Kh√°ch H√†ng")

    # T·∫£i model v√† scaler
    @st.cache_resource
    def load_model_scaler():
        model = pickle.load(open("kmeans_model.pkl", "rb"))
        scaler = pickle.load(open("scaler.pkl", "rb"))
        return model, scaler

    model, scaler = load_model_scaler()

    # T·∫£i d·ªØ li·ªáu RFM
    rfm_df = pd.read_csv("rfm_output.csv")

    # Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p li·ªáu
    input_mode = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c d·ª± ƒëo√°n:", ["üî¢ Nh·∫≠p m√£ kh√°ch h√†ng", "‚úçÔ∏è Nh·∫≠p th·ªß c√¥ng RFM"])

    if input_mode == "üî¢ Nh·∫≠p m√£ kh√°ch h√†ng":
        member_id = st.number_input("Nh·∫≠p m√£ kh√°ch h√†ng (4 ch·ªØ s·ªë):", min_value=1000, max_value=9999, step=1)
        if st.button("üîç D·ª± ƒëo√°n"):
            if member_id in rfm_df["Member_number"].values:
                row = rfm_df[rfm_df["Member_number"] == member_id]
                rfm_values = row[["Frequency", "Recency", "Monetary"]].values
                rfm_scaled = scaler.transform(rfm_values)
                cluster = model.predict(rfm_scaled)[0]

                st.success(f"üìä Kh√°ch h√†ng **{member_id}** thu·ªôc **C·ª•m {cluster}**")

                if cluster == 0:
                    st.info("üü° Nh√≥m kh√°ch h√†ng trung th√†nh ho·∫∑c chi ti√™u nhi·ªÅu.")
                elif cluster == 1:
                    st.info("üîµ Nh√≥m kh√°ch h√†ng b√¨nh th∆∞·ªùng.")
                elif cluster == 2:
                    st.info("üî¥ Nh√≥m kh√°ch h√†ng √≠t ho·∫°t ƒë·ªông ho·∫∑c m·ªõi.")
            else:
                st.warning("‚ùó M√£ kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu.")

    else:
        st.subheader("‚úçÔ∏è Nh·∫≠p th√¥ng tin RFM c·ªßa kh√°ch h√†ng:")
        recency = st.number_input("Recency (S·ªë ng√†y g·∫ßn nh·∫•t mua h√†ng)", min_value=0)
        frequency = st.number_input("Frequency (S·ªë l·∫ßn mua h√†ng)", min_value=0)
        monetary = st.number_input("Monetary (T·ªïng chi ti√™u)", min_value=0.0)

        if st.button("üîé D·ª± ƒëo√°n nh√≥m kh√°ch h√†ng"):
            rfm_input = np.array([[frequency, recency, monetary]])
            rfm_scaled = scaler.transform(rfm_input)
            cluster = model.predict(rfm_scaled)[0]

            st.success(f"üìä Kh√°ch h√†ng thu·ªôc **C·ª•m {cluster}**")

            if cluster == 0:
                st.info("üü° Nh√≥m kh√°ch h√†ng trung th√†nh ho·∫∑c chi ti√™u nhi·ªÅu.")
            elif cluster == 1:
                st.info("üîµ Nh√≥m kh√°ch h√†ng b√¨nh th∆∞·ªùng.")
            elif cluster == 2:
                st.info("üî¥ Nh√≥m kh√°ch h√†ng √≠t ho·∫°t ƒë·ªông ho·∫∑c m·ªõi.")
